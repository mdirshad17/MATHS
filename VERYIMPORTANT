#include <bits/stdc++.h>
using namespace std;
#define      int long long int
#define      M    1000000007
#define      hM   9999999900000001
#define      vi vector<int>
#define      vvi vector<vi>
#define      vpi vector<pair<int,int>>
#define      pii pair<int,int>
#define      pb push_back
#define      inf 1e18
#define      ff first
#define      ss  second
#define      line  "\n"
#define      deb(x) cout<<#x<<" "<<x<<endl;
#define      all(x) x.begin(),x.end()
#define      printVec(vec) {for(auto &x : vec) cout << x <<" "; cout << endl; }
const int N = 1e5 + 10;
const int k = 22;

//int BIT[N];
//void add(int x, int val) {while (x < N)BIT[x] += val, x += x & -x;}
//int sum(int x) {return x ? BIT[x] + sum(x - (x & -x)) : 0;}
int st[N][k];
int lg[N];
int f(int a, int b) { return __gcd(a, b);}
void build(vector<int> &v)
{
  int n = v.size();
  for (int i = 2; i <= N; i++) {
    lg[i] = 1 + lg[i / 2];
  }


  for (int i = 0; i < n; i++)
    st[i][0] = v[i];

  for (int j = 1; j <= k; j++)
  {
    for (int i = 0; i + (1 << j) <= n; i++)
    {
      st[i][j] = f(st[i][j - 1], st[i + (1 << (j - 1))][j - 1]);
    }
  }
}
int qr(int l, int r)
{

  int len = lg[(r - l + 1)];
  return f(st[l][len], st[r - (1 << len) + 1][len]);
}

void runcases(int T)
{

  int n;
  cin >> n;
  vi v(n);
  vi diff;
  for (int i = 0; i < n; i++) {
    cin >> v[i];

  }
  // BRUTE FORCE WAS USING O(Q*N*N);
  // OPTIMISED BRUTE FORCE WAS O(N*N)-> MAINTING A FREQUENCY ARRAY THAT KEEPS TRACK OF THE GCD COUNT 
  
  
  // THIS WAS BASED ON MATHS FOR EVERY GCD G IT REDUCES TO EITHER G/2,G/3...G/K SO THE HERE WE HAVE TO FIND 
  // THE LONGEST SUBARRAY STARTING AT i HAVING GCD G SO THIS CAN BE DONE IN O(LOG(N)) USING BS 
  //  HERE INSTEAD OF INCREASING THE i BY ONE EVERY TIME WE HAVE INCREASED IT BY A CERTAIN VALUE AND FOR A 
  // PARTICULAR VALUE OF i THIS WHILE LOOP WILL MAXIMUM ITERATE FOR 32 TIMES ONLY BECAUSE NUMS ARE IN INTEGER RANGE
  build(v);
  map<int, int> mp;
  for (int i = 0; i < n; i++)
  {
    int idx = i;
    int g = v[idx];
    while (idx < n)
    {
      int incr = idx;
      g = qr(i, idx);
      int l = idx, r = n - 1;
      while (l <= r)
      {
        int m = (l + r) / 2;
        if (qr(i, m) == g)
        {
          incr = m;
          l = m + 1;
        } else r = m - 1;
      }
      mp[g] += (incr - idx + 1);
      idx = (incr + 1);
    }
  }
  int q;
  cin >> q;
  int x;
  while (q--)
  {
    cin >> x;
    if (mp.count(x)) cout << mp[x];
    else cout << 0;

    cout << line;
  }
}

int32_t main()
{
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int T = 1;
  //cin >> T;
  for (int t = 1; t <= T; t++) {
    runcases(t);
  }

  return 0;
}
Â 
